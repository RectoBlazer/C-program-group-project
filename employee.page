#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MAX_USERS 100
#define MAX_NAME_LENGTH 50
#define MAX_CONTACT_LENGTH 50
#define MAX_USERNAME_LENGTH 50
#define MAX_PASSWORD_LENGTH 50

typedef struct {
    char name[MAX_NAME_LENGTH];
    char contact[MAX_CONTACT_LENGTH];
    char username[MAX_USERNAME_LENGTH];
    char password2[MAX_PASSWORD_LENGTH];
} User;

User employees[MAX_USERS];
int employeeCount = 0;

void registerEmployee();
int loginEmployee();
void employeePage();
void viewCustomerList();
void viewAccommodation();
void logout();
int validatePassword(const char *password);

int main() {
    int choice;

    while (1) {
        printf("\n=== Main Menu ===\n");
        printf("1. Register a New Employee\n");
        printf("2. Login\n");
        printf("3. Back to Main Menu\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        getchar(); // Consume newline

        switch (choice) {
            case 1:
                registerEmployee();
                break;
            case 2:
                if (loginEmployee()) {
                    employeePage();
                }
                break;
            case 3:
                printf("\nExiting the system. Goodbye!\n");
                return 0;
            default:
                printf("\nInvalid choice. Please try again.\n");
        }
    }
}

void registerEmployee() {
    if (employeeCount >= MAX_USERS) {
        printf("\nEmployee limit reached. Cannot register more employees.\n");
        return;
    }

    User newEmployee;

    printf("\n=== Register a New Employee ===\n");
    printf("Enter name: ");
    fgets(newEmployee.name, MAX_NAME_LENGTH, stdin);
    newEmployee.name[strcspn(newEmployee.name, "\n")] = '\0';

    printf("Enter contact information: ");
    fgets(newEmployee.contact, MAX_CONTACT_LENGTH, stdin);
    newEmployee.contact[strcspn(newEmployee.contact, "\n")] = '\0';

    printf("Enter username: ");
    fgets(newEmployee.username, MAX_USERNAME_LENGTH, stdin);
    newEmployee.username[strcspn(newEmployee.username, "\n")] = '\0';

    do {
        printf("Enter password (at least 8 characters, including uppercase letters and digits): ");
        fgets(newEmployee.password, MAX_PASSWORD_LENGTH, stdin);
        newEmployee.password[strcspn(newEmployee.password, "\n")] = '\0';

        if (!validatePassword(newEmployee.password)) {
            printf("\nInvalid password. Please follow the password requirements.\n");
        }
    } while (!validatePassword(newEmployee.password));

    employees[employeeCount++] = newEmployee;
    printf("\nEmployee registered successfully. Press Enter to continue to Main Menu.\n");
    getchar();
}

int loginEmployee() {
    char username[MAX_USERNAME_LENGTH], password[MAX_PASSWORD_LENGTH];

    printf("\n=== Login ===\n");
    printf("Enter username: ");
    fgets(username, MAX_USERNAME_LENGTH, stdin);
    username[strcspn(username, "\n")] = '\0';

    printf("Enter password: ");
    fgets(password, MAX_PASSWORD_LENGTH, stdin);
    password[strcspn(password, "\n")] = '\0';

    for (int i = 0; i < employeeCount; i++) {
        if (strcmp(employees[i].username, username) == 0 && strcmp(employees[i].password, password) == 0) {
            printf("\nLogin successful. Welcome, %s!\n", employees[i].name);
            return 1;
        }
    }

    printf("\nInvalid username or password. Please try again.\n");
    return 0;
}

void employeePage() {
    int choice;

    while (1) {
        printf("\n=== Employee Page ===\n");
        printf("1. View List of Customers\n");
        printf("2. View List of Accommodations\n");
        printf("3. Logout\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        getchar(); // Consume newline

        switch (choice) {
            case 1:
                viewCustomerList();
                break;
            case 2:
                viewAccommodation();
                break;
            case 3:
                logout();
                return;
            default:
                printf("\nInvalid choice. Please try again.\n");
        }
    }
}

void viewCustomerList() {
    printf("\n=== Customer List ===\n");
    printf("(No customer data available in this example)\n");
}

void viewAccommodation() {
    printf("\n=== Accommodation List ===\n");
    printf("(No accommodation data available in this example)\n");
}

void logout() {
    printf("\nLogging out from Employee Page.\n");
}

int validatePassword(const char *password) {
    int hasUpper = 0, hasDigit = 0, length = strlen(password);

    if (length < 8) {
        return 0;
    }

    for (int i = 0; i < length; i++) {
        if (isupper(password[i])) hasUpper = 1;
        if (isdigit(password[i])) hasDigit = 1;
    }

    return hasUpper && hasDigit;
}
